Structure
----------------------------------------------------
<template>
    <h1>Hello World</h1>   ------> Here goes HTML code
</template>

[camelCase, kebab-case, PascalCase]

<script>
export default {
  props:{           --------- CamelCase
      propName: {
          type: string,
          required: true,
          default: 'value' or function(){},
          validator: function() {}   ------> Used to validate the provided value
      }
  },
  data() {
		return {
        }
	},
	watch:{
		inp(value){           Watcher -------> Same as computed but best for single value
		}
	},
	computed:{				
		function() {		  computed ------> Executed only when dependent values are changed
		}                          
	},                    
	methods:{
		function() {          methods -------> Executed even a single value is changed in the page
		}
	},
};
</script>

<style>
@import url('https://fonts.googleapis.com/css2?family=Jost&display=swap');
@import url('https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css');

.class{
    background-color: red;
}
</style>

---------------------------------------------------------------------------------
this.$emit Syntax
---------------------------------------------------------------------------------
cmoponent file (home.veu)
props: {
	id:{
		 type: string,
		 required: true
	}
}

method: {
	compFunction() {
		this.$emit('passed-value', this.id)   -------> Kebab Case 
	}
}

main file(app.vue)
<customtag
	:id = items.id,
	@passed-value = "mainFunction" >
</customtag>

methods: {
	mainFunction(value) {              --------> Value got from component file
		const receivedId = this.items.find(i => i.id == value);
		receivedId.item = 'Set any value'
	}
}

===================================================================================
provide and inject
===================================================================================
parent file (app.vue)
provide() {
	return {
		items = this.items
	};
}

child file (details.vue)
inject: ['items']

===================================================================================
Slots
===================================================================================
<slot name="slotName"> This is shown if content not available </slot>
Using slot syntax
<template v-slot:slotName>  </template> 
				or
<template #slotName>  </template> 